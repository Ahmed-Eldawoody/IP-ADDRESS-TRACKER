{"version":3,"sources":["components/SearchBar/icon-arrow.svg","components/SearchBar/SearchBar.js","components/IpInfo/IpInfo.js","components/MapLeaflet/MapLeaflet.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","className","type","placeholder","onChange","onSearch","onClick","src","require","alt","IpInfo","ip","city","location","timezone","isp","MapLeaflet","state","lat","lng","zoom","position","pointerIcon","L","Icon","iconUrl","iconAnchor","popupAnchor","shadowSize","shadowAnchor","Map","center","TileLayer","attribution","url","Marker","icon","Popup","App","useState","setIp","data","setData","setLat","setLng","ipfy","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","a","useEffect","res","IPv4","event","target","value","region","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6a3d9441.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","import React from 'react';\r\nimport './SearchBar.css'\r\n\r\nfunction SearchBar(props) {\r\n    return (\r\n        <div className='searchbar'>\r\n            <input type='search'\r\n                placeholder='Search for any IP address or domain'\r\n                className='search'\r\n                onChange={props.onSearch} />\r\n            <button className='arrow' onClick={props.onClick}>\r\n                <img src={require('./icon-arrow.svg')} alt='' />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n","import React from 'react'\r\nimport './IpInfo.css'\r\n\r\nfunction IpInfo(props) {\r\n    // const location = props.region\r\n    // console.log(location)\r\n    return (\r\n        <>\r\n            <div className='Ip-info'>\r\n                <p className='title'>IP ADDRESS</p>\r\n                <p className='info'>{props.ip}</p>\r\n            </div>\r\n            <div className='Ip-info'>\r\n                <p className='title'>LOCATION</p>\r\n                <p className='info'>{props.city}  {props.location}</p>\r\n            </div>\r\n            <div className='Ip-info'>\r\n                <p className='title'>TIME ZONE</p>\r\n                <p className='info'>{props.timezone}</p>\r\n            </div>\r\n            <div className='Ip-info'>\r\n                <p className='title'>ISP</p>\r\n                <p className='info'>{props.isp}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default IpInfo\r\n","import React from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport L from \"leaflet\";\r\nimport 'leaflet/dist/leaflet.css'\r\nimport './MapLeaflet.css'\r\n\r\nfunction MapLeaflet(props) {\r\n    const state = {\r\n        lat: props.lat,\r\n        lng: props.lng,\r\n        zoom: 13\r\n    }\r\n    const position = [state.lat, state.lng]\r\n    const pointerIcon = new L.Icon({\r\n        iconUrl: \"/icon-location.svg\",\r\n        iconAnchor: [5, 60],\r\n        popupAnchor: [0, 0],\r\n        // iconSize: [25, 55],\r\n        shadowSize: [68, 95],\r\n        shadowAnchor: [20, 92]\r\n    });\r\n    return (\r\n        <Map center={position} zoom={state.zoom}>\r\n            <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker position={position} icon={pointerIcon} center={position}>\r\n                <Popup>\r\n                    A pretty CSS3 popup. <br /> Easily customizable.\r\n                </Popup>\r\n            </Marker>\r\n        </Map>\r\n    )\r\n}\r\n\r\nexport default MapLeaflet\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar'\nimport IpInfo from '../IpInfo/IpInfo'\nimport MapLeaflet from '../MapLeaflet/MapLeaflet'\n\nfunction App() {\n\n  const [ip, setIp] = useState(null);\n  const [data, setData] = useState({})\n  const [lat, setLat] = useState(0)\n  const [lng, setLng] = useState(0)\n\n\n  function handleSearch(event) {\n    setIp(event.target.value)\n  }\n\n\n  useEffect(() => {\n    fetch('https://geolocation-db.com/json/7733a990-ebd4-11ea-b9a6-2955706ddbf3')\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        throw new Error('Request failed!')\n      }, networkError => console.log(networkError.message))\n      .then(json => {\n        setIp(json.IPv4)\n      })\n  }, [])\n\n\n\n  function ipfy() {\n    const data = fetch(`https://geo.ipify.org/api/v1?apiKey=at_ufBBaLzco7Wwjkf7euZvBf6osvxrR&ipAddress=${ip}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        }\n        throw new Error('Request failed! Note: You must enter a valid IP address for more info please visit (https://docs.oracle.com/cd/E19504-01/802-5753/planning3-18471/index.html)')\n      }, networkError => console.log(networkError.message))\n      .then(jsonResponse => {\n        return jsonResponse\n      })\n    return data\n  }\n\n  async function locationInfo() {\n    await ipfy().then(data => {\n      setData({ ...data })\n      setLat(data.location.lat)\n      setLng(data.location.lng)\n    })\n  }\n\n  const location = { ...data.location };\n\n\n\n  return (\n    <div className=\"App\">\n      <header className='header'>\n        <h1>IP Address Tracker</h1>\n        <div className='searchBar'>\n          <SearchBar onSearch={handleSearch} onClick={locationInfo} />\n        </div>\n      </header>\n      <main>\n        <section className='ip-info'>\n          <IpInfo ip={data.ip} location={location.region} city={location.city} timezone={location.timezone} isp={data.isp} />\n        </section>\n        <section className='map'><MapLeaflet lat={lat} lng={lng} /></section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}